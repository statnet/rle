# NOTE: This script is a modification of the r-lib/actions standard cehcking script and the public-private sync script, on which it piggybacks to detect when it's in a private repo and can therefore skip some or even all tests.

# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions

on: [push, pull_request]

name: R-CMD-check

# Set public and private repositories (i.e., USER/PKG). Leave blank to autodetect.
env:
  PUBLIC: ''
  PRIVATE: ''

jobs:
  Set-Matrix-Private:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: check-config # Make sure either neither or both are set; abort if not.
        if: (env.PUBLIC == '') != (env.PRIVATE == '')
        run: |
          echo "Configuration problem: only one of the repositories is set."
          exit 1
      - name: detect-repos
        if: env.PUBLIC == '' && env.PRIVATE == '' # Autodetect always.
        run: |
          if [[ "${{ github.repository }}" == *-private ]]
          then # Current repo is private.
            IAM="private"
            PRIVATE="${{ github.repository }}"
            PUBLIC="${PRIVATE%-private}"
          else # Current repo is public.
            IAM="public"
            PUBLIC="${{ github.repository }}"
            PRIVATE="$PUBLIC-private"
          fi
          echo "IAM=$IAM" >> $GITHUB_ENV
          echo "PRIVATE=$PRIVATE" >> $GITHUB_ENV
          echo "PUBLIC=$PUBLIC" >> $GITHUB_ENV
      - name: public-check # Check if the branch/tag exists in the public repository.
        if: env.IAM == 'private' # Only check if from private repo.
        run: |
          set +e
          git ls-remote --exit-code https://github.com/${{ env.PUBLIC }} ${{ github.ref }}
          echo "FOUND_PUBLIC=$?" >> $GITHUB_ENV
      - name: set-matrix
        id: set-matrix
        run: |
          if [[ "${{ env.IAM }}" == 'public' ]] # Public: full set.
          then
            echo "::set-output name=matrix::{\"config\":[{\"os\":\"windows-latest\", \"r\":\"release\"},{\"os\":\"macOS-latest\", \"r\":\"release\"},{\"os\":\"ubuntu-20.04\", \"r\":\"release\", \"rspm\":\"https://packagemanager.rstudio.com/cran/__linux__/focal/latest\"},{\"os\":\"ubuntu-20.04\", \"r\":\"devel\", \"rspm\":\"https://packagemanager.rstudio.com/cran/__linux__/focal/latest\"}]}"
          elif [[ "${{ env.FOUND_PUBLIC }}" != '0' ]] # Private with no public analogue: reduced set.
          then
            echo "::set-output name=matrix::{\"config\":[{\"os\":\"ubuntu-20.04\", \"r\":\"release\", \"rspm\":\"https://packagemanager.rstudio.com/cran/__linux__/focal/latest\"}]}"
          else
            echo "::set-output name=matrix::" # Private with public analogue: no checking.
          fi

  R-CMD-check:
    needs: Set-Matrix-Private

    if: needs.Set-Matrix-Private.outputs.matrix != ''

    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.Set-Matrix-Private.outputs.matrix)}}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
