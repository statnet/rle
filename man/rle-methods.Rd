% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rle_utils.R
\name{c.rle}
\alias{c.rle}
\alias{any.rle}
\alias{all.rle}
\alias{sum.rle}
\alias{mean.rle}
\alias{length.rle}
\alias{is.na.rle}
\alias{str.rle}
\title{\code{\link{rle}} methods for common functions on vectors}
\usage{
\method{c}{rle}(...)

\method{any}{rle}(..., na.rm = FALSE)

\method{all}{rle}(..., na.rm = FALSE)

\method{sum}{rle}(..., na.rm = FALSE)

\method{mean}{rle}(x, na.rm = FALSE, ...)

\method{length}{rle}(x)

\method{is.na}{rle}(x)

\method{str}{rle}(object, ...)
}
\arguments{
\item{...}{For \code{c}, objects to be concatenated. The first object
must be of class \code{\link{rle}}. For \code{sum}, objects to be summed.}

\item{na.rm}{see documentation for \code{\link{any}}, \code{\link{all}}, and \code{\link{sum}}.}

\item{x}{an \code{\link{rle}} object.}

\item{object}{an \code{rle} object.}
}
\value{
\code{\link{any}}, \code{\link{all}}, \code{\link{mean}}, \code{\link{sum}}, and \code{\link{length}} return logical, logical, numeric, numeric, and numeric vectors, respectively.
}
\description{
\code{\link{rle}} methods for common functions on vectors
}
\note{
The \code{\link{length}} method returns the length of the vector
represented by the object, obtained by summing the lengths of
individual runs. This can be overridden by setting
\code{options(rle.length_represented = FALSE)}, which causes it to
return the length of the underlying list (usually 2) instead.
}
\examples{
x <- rle(as.logical(rbinom(10,1,.7)))
y <- rle(as.logical(rbinom(10,1,.3)))

stopifnot(isTRUE(all.equal(c(inverse.rle(x),inverse.rle(y)),inverse.rle(c(x,y)))))


x <- rle(as.logical(rbinom(10,1,.9)))
y <- rle(as.logical(rbinom(10,1,.1)))

stopifnot(isTRUE(all.equal(any(x),any(inverse.rle(x)))))
stopifnot(isTRUE(all.equal(any(y),any(inverse.rle(y)))))


stopifnot(isTRUE(all.equal(all(x),all(inverse.rle(x)))))
stopifnot(isTRUE(all.equal(all(y),all(inverse.rle(y)))))


stopifnot(isTRUE(all.equal(sum(inverse.rle(x)),sum(x))))
stopifnot(isTRUE(all.equal(sum(inverse.rle(y)),sum(y))))


stopifnot(isTRUE(all.equal(mean(inverse.rle(x)),mean(x))))
stopifnot(isTRUE(all.equal(mean(inverse.rle(y)),mean(y))))


stopifnot(isTRUE(all.equal(length(inverse.rle(x)),length(x))))
stopifnot(isTRUE(all.equal(length(inverse.rle(y)),length(y))))

x$values[1] <- NA
y$values[1] <- NA
stopifnot(isTRUE(all.equal(is.na(inverse.rle(x)),inverse.rle(is.na(x)))))
stopifnot(isTRUE(all.equal(is.na(inverse.rle(y)),inverse.rle(is.na(y)))))


str(x)

}
